openapi: '3.0.2'
info:
  title: API MyGram
  description: API like Instagram. This API is Final Project Koinworks
  version: '1.0'
servers:
  - url: https://localhost:3000
components:
  schemas:
    User:
      type: object
      properties:
        age:
          type: integer
          minimum: 9
        email:
          type: string
          uniqueItems: true
        password:
          type: string
          minLength: 6
        username:
          type: string
          uniqueItems: true
      required:
        - age
        - email
        - password
        - username
    ResponseRegisterUser:
      type: object
      properties:
        age:
          type: integer
        email:
          type: string
        id:
          type: integer
        username:
          type: string
    ResponseUpdateUser:
      type: object
      properties:
        age:
          type: integer
        email:
          type: string
        id:
          type: integer
        username:
          type: string
        updated_at:
          type: string
    LoginUpdateUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password     
    FailedResponse:
      type: object
      properties:
        error:
          type: string
    SuccessResponseMessage:
      type: object
      properties:
        message:
          type: string

paths:
  /users/register:
    post:
      tags:
      - users
      description: Register new user
      summary: Register new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'

      responses:
        '201':
          description: Success register new user
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ResponseRegisterUser'
        '400':
          description: Failed register new user
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/FailedResponse'
  /users/login:
    post:
      tags:
      - users
      description: Login user to get token
      summary: Login user to get token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/LoginUpdateUser'
      responses:
        '200':
          description: Success login user
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Failed login user
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/FailedResponse'
  /users/{userId}:
    put:
      tags:
      - users
      description: Update data user by user id
      summary: Update data user by user id
      parameters:
        - required: true
          name: userId
          in: path
          description: user id 
          schema:
            type: integer
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/LoginUpdateUser'
      responses:
        '200':
          description: Success update data user
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ResponseUpdateUser'
        '400':
          description: Failed update data user
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/FailedResponse'
    delete:
      tags:
      - users
      description: Delete user by user id
      summary: Delete user by user id
      parameters:
        - required: true
          name: userId
          in: path
          description: user id 
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Success delete user
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/SuccessResponseMessage'
        '400':
          description: Failed delete user
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/FailedResponse'
  /photos:
    post:
      tags:
      - photos
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
    get:
      tags:
      - photos
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
  /photos/{photoId}:
    put:
      tags:
      - photos
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
    delete:
      tags:
      - photos
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
  /comments:
    post:
      tags:
      - comments
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
    get:
      tags:
      - comments
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
  /comments/{commentId}:
    put:
      tags:
      - comments
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
    delete:
      tags:
      - comments
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
  /socialmedias:
    post:
      tags:
      - socialmedias
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
    get:
      tags:
      - socialmedias
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
  /socialmedias/{socialMediaId}:
    put:
      tags:
      - socialmedias
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
    delete:
      tags:
      - socialmedias
      responses:
        '200':
          description: OK
        '400':
          description: ERROR